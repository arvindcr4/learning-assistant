#!/bin/bash

# =============================================================================
# Learning Assistant - Deployment Orchestrator Setup
# =============================================================================

set -euo pipefail

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly CYAN='\033[0;36m'
readonly NC='\033[0m' # No Color

# Script configuration
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly DEPLOY_DIR="${SCRIPT_DIR}/deploy"
readonly LOG_DIR="${SCRIPT_DIR}/logs"
readonly CONFIG_DIR="${SCRIPT_DIR}/deploy/config"

# Logging functions
log_info() {
    echo -e "${BLUE}ℹ️  $*${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $*${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $*${NC}"
}

log_error() {
    echo -e "${RED}❌ $*${NC}"
}

# Check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check system requirements
check_requirements() {
    log_info "Checking system requirements..."
    
    local missing_deps=()
    local required_deps=("curl" "git" "docker" "node" "npm")
    
    for dep in "${required_deps[@]}"; do
        if ! command_exists "${dep}"; then
            missing_deps+=("${dep}")
        fi
    done
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        log_error "Missing required dependencies: ${missing_deps[*]}"
        log_info "Please install missing dependencies and run setup again."
        return 1
    fi
    
    log_success "All required dependencies are installed"
    return 0
}

# Check platform CLIs
check_platform_clis() {
    log_info "Checking platform CLI availability..."
    
    local platform_clis=(
        "aws:AWS CLI"
        "gcloud:Google Cloud SDK"
        "az:Azure CLI"
        "flyctl:Fly.io CLI"
        "railway:Railway CLI"
        "doctl:DigitalOcean CLI"
        "linode-cli:Linode CLI"
    )
    
    local available_platforms=()
    local missing_platforms=()
    
    for cli_info in "${platform_clis[@]}"; do
        local cli="${cli_info%:*}"
        local name="${cli_info#*:}"
        
        if command_exists "${cli}"; then
            available_platforms+=("${name}")
        else
            missing_platforms+=("${name}")
        fi
    done
    
    log_success "Available platforms (${#available_platforms[@]}):"
    for platform in "${available_platforms[@]}"; do
        echo "  ✅ ${platform}"
    done
    
    if [[ ${#missing_platforms[@]} -gt 0 ]]; then
        log_warning "Missing platform CLIs (${#missing_platforms[@]}):"
        for platform in "${missing_platforms[@]}"; do
            echo "  ❌ ${platform}"
        done
        echo ""
        log_info "Install missing CLIs to enable deployment to those platforms"
    fi
}

# Create directory structure
create_directories() {
    log_info "Creating deployment directory structure..."
    
    local directories=(
        "${DEPLOY_DIR}"
        "${DEPLOY_DIR}/platforms"
        "${DEPLOY_DIR}/utils"
        "${CONFIG_DIR}"
        "${LOG_DIR}"
        "${LOG_DIR}/backups"
        "${SCRIPT_DIR}/tmp"
    )
    
    for dir in "${directories[@]}"; do
        mkdir -p "${dir}"
        log_success "Created directory: ${dir}"
    done
}

# Set up platform configurations
setup_platform_configs() {
    log_info "Setting up platform configurations..."
    
    local platforms=("aws" "gcp" "azure" "fly" "railway" "render" "digitalocean" "linode")
    local environments=("production" "staging" "development")
    
    for platform in "${platforms[@]}"; do
        mkdir -p "${CONFIG_DIR}/${platform}"
        
        for environment in "${environments[@]}"; do
            local config_file="${CONFIG_DIR}/${platform}/${environment}.env"
            
            if [[ ! -f "${config_file}" ]]; then
                # Source the common utilities to generate config
                if [[ -f "${DEPLOY_DIR}/utils/common.sh" ]]; then
                    source "${DEPLOY_DIR}/utils/common.sh"
                    generate_environment_config "${platform}" "${environment}" "${config_file}"
                else
                    log_warning "Common utilities not found, creating basic config for ${platform}/${environment}"
                    cat > "${config_file}" << EOF
# ${platform} ${environment} Configuration
# Generated by setup script

APP_NAME=learning-assistant
NODE_ENV=${environment}
PORT=3000
PLATFORM=${platform}
ENVIRONMENT=${environment}

# Add platform-specific configuration here
EOF
                fi
                log_success "Created config: ${platform}/${environment}"
            else
                log_info "Config already exists: ${platform}/${environment}"
            fi
        done
    done
}

# Make scripts executable
make_scripts_executable() {
    log_info "Making scripts executable..."
    
    local scripts=(
        "${SCRIPT_DIR}/deploy.sh"
        "${DEPLOY_DIR}/utils/health-check.sh"
        "${DEPLOY_DIR}/utils/rollback.sh"
        "${SCRIPT_DIR}/setup-deployment.sh"
    )
    
    for script in "${scripts[@]}"; do
        if [[ -f "${script}" ]]; then
            chmod +x "${script}"
            log_success "Made executable: $(basename "${script}")"
        else
            log_warning "Script not found: ${script}"
        fi
    done
}

# Test deployment orchestrator
test_deployment_orchestrator() {
    log_info "Testing deployment orchestrator..."
    
    # Test help command
    if "${SCRIPT_DIR}/deploy.sh" --help > /dev/null 2>&1; then
        log_success "Deployment script help command works"
    else
        log_error "Deployment script help command failed"
        return 1
    fi
    
    # Test health check script
    if [[ -f "${DEPLOY_DIR}/utils/health-check.sh" ]]; then
        if "${DEPLOY_DIR}/utils/health-check.sh" help > /dev/null 2>&1; then
            log_success "Health check script works"
        else
            log_warning "Health check script may have issues"
        fi
    fi
    
    # Test rollback script
    if [[ -f "${DEPLOY_DIR}/utils/rollback.sh" ]]; then
        if "${DEPLOY_DIR}/utils/rollback.sh" help > /dev/null 2>&1; then
            log_success "Rollback script works"
        else
            log_warning "Rollback script may have issues"
        fi
    fi
}

# Generate sample deployment
generate_sample_deployment() {
    log_info "Generating sample deployment configuration..."
    
    # Create a sample fly.toml if it doesn't exist
    if [[ ! -f "${SCRIPT_DIR}/fly.toml" ]]; then
        cat > "${SCRIPT_DIR}/fly.toml" << 'EOF'
# fly.toml app configuration file
# This is a sample configuration - customize as needed

app = "learning-assistant-sample"
primary_region = "bom"

[build]

[http_service]
  internal_port = 3000
  force_https = true
  auto_stop_machines = 'stop'
  auto_start_machines = true
  min_machines_running = 0
  processes = ['app']

[[vm]]
  memory = '1gb'
  cpu_kind = 'shared'
  cpus = 1

[env]
  NODE_ENV = "production"
  PORT = "3000"
  NEXT_TELEMETRY_DISABLED = "1"
EOF
        log_success "Created sample fly.toml configuration"
    else
        log_info "fly.toml already exists"
    fi
    
    # Create .deployignore file
    cat > "${SCRIPT_DIR}/.deployignore" << 'EOF'
# Files to ignore during deployment
node_modules/
.next/
.git/
*.log
.env.local
.env.development
.env.test
coverage/
.nyc_output/
*.tsbuildinfo
.DS_Store
Thumbs.db
EOF
    log_success "Created .deployignore file"
}

# Show setup summary
show_setup_summary() {
    log_info "Deployment Orchestrator Setup Complete!"
    
    echo ""
    echo -e "${CYAN}📁 Directory Structure:${NC}"
    echo "  deploy/                 - Deployment configurations and scripts"
    echo "  deploy/platforms/       - Platform-specific deployment handlers"
    echo "  deploy/utils/          - Utility scripts (health checks, rollback)"
    echo "  deploy/config/         - Environment configurations by platform"
    echo "  logs/                  - Deployment logs and backups"
    echo ""
    
    echo -e "${CYAN}🚀 Available Commands:${NC}"
    echo "  ./deploy.sh --help                     - Show deployment help"
    echo "  ./deploy.sh fly production             - Deploy to Fly.io production"
    echo "  ./deploy.sh aws staging --verbose      - Deploy to AWS staging with verbose output"
    echo "  ./deploy/utils/health-check.sh --help  - Show health check help"
    echo "  ./deploy/utils/rollback.sh list        - List available rollbacks"
    echo ""
    
    echo -e "${CYAN}📖 Documentation:${NC}"
    echo "  DEPLOYMENT_GUIDE.md    - Comprehensive deployment guide"
    echo "  README.md              - Project documentation"
    echo ""
    
    echo -e "${CYAN}🔧 Next Steps:${NC}"
    echo "  1. Configure platform CLIs (aws configure, flyctl auth login, etc.)"
    echo "  2. Customize deploy/config/ files for your environments"
    echo "  3. Test deployment: ./deploy.sh <platform> staging --dry-run"
    echo "  4. Deploy to production: ./deploy.sh <platform> production"
    echo ""
    
    log_success "Happy deploying! 🎉"
}

# Main setup function
main() {
    echo -e "${CYAN}=====================================================${NC}"
    echo -e "${CYAN}  Learning Assistant - Deployment Orchestrator Setup${NC}"
    echo -e "${CYAN}=====================================================${NC}"
    echo ""
    
    # Run setup steps
    check_requirements || exit 1
    check_platform_clis
    create_directories
    make_scripts_executable
    setup_platform_configs
    test_deployment_orchestrator
    generate_sample_deployment
    
    echo ""
    show_setup_summary
}

# Run main function
main "$@"