name: Optimized Test Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM
  workflow_dispatch:
    inputs:
      skip_e2e:
        description: 'Skip E2E tests'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      test_environment:
        description: 'Test environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      run_performance_tests:
        description: 'Run performance tests'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      enable_debug:
        description: 'Enable debug mode'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  NODE_VERSION: '20.x'
  SKIP_E2E: ${{ github.event.inputs.skip_e2e || 'false' }}
  TEST_ENVIRONMENT: ${{ github.event.inputs.test_environment || 'staging' }}
  RUN_PERFORMANCE_TESTS: ${{ github.event.inputs.run_performance_tests || 'true' }}
  ENABLE_DEBUG: ${{ github.event.inputs.enable_debug || 'false' }}
  FORCE_COLOR: 1
  CI: true
  ENABLE_PERFORMANCE_MONITORING: true
  GENERATE_PERF_REPORT: true

jobs:
  # Smart change detection for intelligent test selection
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      tests: ${{ steps.changes.outputs.tests }}
      docs: ${{ steps.changes.outputs.docs }}
      config: ${{ steps.changes.outputs.config }}
      e2e: ${{ steps.changes.outputs.e2e }}
      performance: ${{ steps.changes.outputs.performance }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'src/components/**'
              - 'src/hooks/**'
              - 'src/contexts/**'
              - 'app/**'
              - 'public/**'
              - '*.tsx'
              - '*.ts'
              - 'tailwind.config.js'
              - 'next.config.js'
              - 'package.json'
            backend:
              - 'src/lib/**'
              - 'src/services/**'
              - 'src/middleware/**'
              - 'app/api/**'
              - 'DATABASE_SCHEMA.sql'
              - 'migrations/**'
              - 'scripts/**'
            tests:
              - '__tests__/**'
              - '*.test.ts'
              - '*.test.tsx'
              - 'jest.config.js'
              - 'jest.setup.js'
              - '__mocks__/**'
            e2e:
              - '__tests__/e2e/**'
              - 'playwright.config.ts'
              - 'src/components/**'
              - 'app/**'
            performance:
              - '__tests__/performance/**'
              - 'src/lib/**'
              - 'src/services/**'
              - 'package.json'
            docs:
              - 'docs/**'
              - '*.md'
              - 'README.md'
            config:
              - 'package.json'
              - 'package-lock.json'
              - 'tsconfig.json'
              - '.github/workflows/**'
              - 'jest.config.js'
              - 'playwright.config.ts'

  # Pre-test quality checks and setup
  pre-test:
    name: Pre-test Setup
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [changes]
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=deps-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            deps-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-
            deps-${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Type checking
        run: npm run type-check

      - name: Linting
        run: npm run lint

      - name: Security audit
        run: npm audit --audit-level=moderate || true

  # Parallel unit tests with smart sharding
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [changes, pre-test]
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true' || needs.changes.outputs.tests == 'true' || needs.changes.outputs.config == 'true'

    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
          key: ${{ needs.pre-test.outputs.cache-key }}
          restore-keys: |
            deps-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-

      - name: Cache Jest cache
        uses: actions/cache@v4
        with:
          path: .jest-cache
          key: jest-${{ runner.os }}-${{ matrix.shard }}-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            jest-${{ runner.os }}-${{ matrix.shard }}-${{ hashFiles('**/package-lock.json') }}-
            jest-${{ runner.os }}-${{ matrix.shard }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run unit tests (Shard ${{ matrix.shard }})
        run: npm run test:unit:shard${{ matrix.shard }}
        env:
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results-shard-${{ matrix.shard }}
          path: |
            test-results/
            coverage/
          retention-days: 30

  # Integration tests with database
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [changes, pre-test]
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.tests == 'true' || needs.changes.outputs.config == 'true'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
          key: ${{ needs.pre-test.outputs.cache-key }}

      - name: Cache Jest cache
        uses: actions/cache@v4
        with:
          path: .jest-cache
          key: jest-integration-${{ runner.os }}-${{ matrix.shard }}-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            jest-integration-${{ runner.os }}-${{ matrix.shard }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Setup test database
        run: |
          npm run db:migrate
          npm run db:seed
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379

      - name: Run integration tests (Shard ${{ matrix.shard }})
        run: npm run test:integration:shard${{ matrix.shard }}
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results-shard-${{ matrix.shard }}
          path: test-results/
          retention-days: 30

  # E2E tests with browser matrix
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [changes, pre-test, unit-tests]
    if: needs.changes.outputs.e2e == 'true' && env.SKIP_E2E != 'true'

    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox]
        shard: [1, 2]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
          key: ${{ needs.pre-test.outputs.cache-key }}

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Playwright browsers
        run: npx playwright install ${{ matrix.browser }} --with-deps

      - name: Build application
        run: npm run build
        env:
          NODE_OPTIONS: --max-old-space-size=6144

      - name: Run E2E tests (${{ matrix.browser }} - Shard ${{ matrix.shard }})
        run: npm run test:e2e:shard${{ matrix.shard }} -- --project=${{ matrix.browser }}
        env:
          PLAYWRIGHT_HTML_REPORT: playwright-report-${{ matrix.browser }}-${{ matrix.shard }}

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-${{ matrix.browser }}-shard-${{ matrix.shard }}
          path: |
            test-results/
            playwright-report-${{ matrix.browser }}-${{ matrix.shard }}/
          retention-days: 30

  # Performance tests with multiple strategies
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [changes, pre-test]
    if: needs.changes.outputs.performance == 'true' && env.RUN_PERFORMANCE_TESTS == 'true'

    strategy:
      matrix:
        test-type: [benchmark, memory, lighthouse]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
          key: ${{ needs.pre-test.outputs.cache-key }}

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build application
        if: matrix.test-type == 'lighthouse'
        run: npm run build
        env:
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Run performance tests (${{ matrix.test-type }})
        run: |
          case "${{ matrix.test-type }}" in
            benchmark)
              npm run test:performance:benchmark
              ;;
            memory)
              npm run test:performance
              ;;
            lighthouse)
              npm run lighthouse:ci
              ;;
          esac
        env:
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results-${{ matrix.test-type }}
          path: |
            test-results/
            lighthouse-ci-report.json
            lighthouse-report.*
          retention-days: 30

  # Accessibility tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [changes, pre-test]
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.tests == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
          key: ${{ needs.pre-test.outputs.cache-key }}

      - name: Cache Jest cache
        uses: actions/cache@v4
        with:
          path: .jest-cache
          key: jest-a11y-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            jest-a11y-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run accessibility tests
        run: npm run test:accessibility

      - name: Upload accessibility test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-test-results
          path: test-results/
          retention-days: 30

  # Comprehensive test coverage
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [changes, pre-test, unit-tests, integration-tests]
    if: always() && (needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true' || needs.changes.outputs.tests == 'true')

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
          key: ${{ needs.pre-test.outputs.cache-key }}

      - name: Cache Jest cache
        uses: actions/cache@v4
        with:
          path: .jest-cache
          key: jest-coverage-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            jest-coverage-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Setup test database
        run: |
          npm run db:migrate
          npm run db:seed
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379

      - name: Run tests with coverage
        run: npm run test:coverage:detailed
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

      - name: Coverage Quality Gate
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            coverage=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
            echo "Coverage: $coverage%"
            if (( $(echo "$coverage < 80" | bc -l) )); then
              echo "❌ Coverage $coverage% is below 80% threshold"
              exit 1
            fi
            echo "✅ Coverage $coverage% meets quality gate"
          else
            echo "⚠️ Coverage summary not found"
          fi

      - name: Comment PR with coverage
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: test-results/test-summary.md

      - name: Upload coverage results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-results
          path: |
            coverage/
            test-results/
          retention-days: 30

  # Test results summary and analytics
  test-summary:
    name: Test Summary & Analytics
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, accessibility-tests, coverage]
    if: always()

    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Aggregate test results
        run: |
          # Create aggregated results directory
          mkdir -p aggregated-results
          
          # Collect all test analytics
          find artifacts -name "test-analytics.json" -exec cp {} aggregated-results/test-analytics-{}.json \\;
          find artifacts -name "performance-metrics.json" -exec cp {} aggregated-results/performance-metrics-{}.json \\;
          find artifacts -name "test-summary.md" -exec cp {} aggregated-results/test-summary-{}.md \\;
          
          # Generate comprehensive summary
          echo "# 🧪 Complete Test Results Summary" > aggregated-results/complete-summary.md
          echo "" >> aggregated-results/complete-summary.md
          echo "## 📊 Job Status Overview" >> aggregated-results/complete-summary.md
          echo "| Job | Status | Result |" >> aggregated-results/complete-summary.md
          echo "|-----|--------|---------|" >> aggregated-results/complete-summary.md
          echo "| Unit Tests | ${{ needs.unit-tests.result }} | $([ '${{ needs.unit-tests.result }}' == 'success' ] && echo '✅' || echo '❌') |" >> aggregated-results/complete-summary.md
          echo "| Integration Tests | ${{ needs.integration-tests.result }} | $([ '${{ needs.integration-tests.result }}' == 'success' ] && echo '✅' || echo '❌') |" >> aggregated-results/complete-summary.md
          echo "| E2E Tests | ${{ needs.e2e-tests.result }} | $([ '${{ needs.e2e-tests.result }}' == 'success' ] && echo '✅' || echo '❌') |" >> aggregated-results/complete-summary.md
          echo "| Performance Tests | ${{ needs.performance-tests.result }} | $([ '${{ needs.performance-tests.result }}' == 'success' ] && echo '✅' || echo '❌') |" >> aggregated-results/complete-summary.md
          echo "| Accessibility Tests | ${{ needs.accessibility-tests.result }} | $([ '${{ needs.accessibility-tests.result }}' == 'success' ] && echo '✅' || echo '❌') |" >> aggregated-results/complete-summary.md
          echo "| Coverage | ${{ needs.coverage.result }} | $([ '${{ needs.coverage.result }}' == 'success' ] && echo '✅' || echo '❌') |" >> aggregated-results/complete-summary.md
          echo "" >> aggregated-results/complete-summary.md
          
          # Add workflow information
          echo "## 🔄 Workflow Information" >> aggregated-results/complete-summary.md
          echo "- **Workflow**: ${{ github.workflow }}" >> aggregated-results/complete-summary.md
          echo "- **Run ID**: ${{ github.run_id }}" >> aggregated-results/complete-summary.md
          echo "- **Run Number**: ${{ github.run_number }}" >> aggregated-results/complete-summary.md
          echo "- **Triggered by**: ${{ github.event_name }}" >> aggregated-results/complete-summary.md
          echo "- **Branch**: ${{ github.ref_name }}" >> aggregated-results/complete-summary.md
          echo "- **Commit**: ${{ github.sha }}" >> aggregated-results/complete-summary.md
          echo "- **Actor**: ${{ github.actor }}" >> aggregated-results/complete-summary.md
          echo "" >> aggregated-results/complete-summary.md

      - name: Generate test summary for GitHub
        run: |
          cat aggregated-results/complete-summary.md >> $GITHUB_STEP_SUMMARY
          
          echo "## 🔗 Artifact Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Test Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Coverage Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## ⚡ Performance Optimizations Enabled" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Intelligent change detection" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Parallel test execution" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Test sharding for unit and integration tests" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Aggressive caching for dependencies and build artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Performance monitoring and analytics" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Smart test selection based on changed files" >> $GITHUB_STEP_SUMMARY

      - name: Upload aggregated results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: aggregated-test-results
          path: aggregated-results/
          retention-days: 30