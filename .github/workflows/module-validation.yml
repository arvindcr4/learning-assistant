name: 'Terraform Module Validation'

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'modules/**'
      - 'patterns/**'
      - '.github/workflows/module-validation.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'modules/**'
      - 'patterns/**'
      - '.github/workflows/module-validation.yml'
  workflow_dispatch:
    inputs:
      module_path:
        description: 'Specific module path to validate'
        required: false
        default: ''
      test_level:
        description: 'Test level (basic, full, security)'
        required: false
        default: 'basic'
        type: choice
        options:
        - basic
        - full
        - security

env:
  TF_VERSION: '1.6.0'
  TFLINT_VERSION: '0.48.0'
  CHECKOV_VERSION: '2.5.0'
  TERRASCAN_VERSION: '1.18.0'
  TERRAFORM_DOCS_VERSION: '0.16.0'

jobs:
  detect-changes:
    name: 'Detect Changed Modules'
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.changed-modules.outputs.modules }}
      patterns: ${{ steps.changed-patterns.outputs.patterns }}
      any_changed: ${{ steps.changed-modules.outputs.any_changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed modules
        id: changed-modules
        uses: tj-actions/changed-files@v39
        with:
          files: |
            modules/**
          json: true
          escape_json: false

      - name: Get changed patterns
        id: changed-patterns
        uses: tj-actions/changed-files@v39
        with:
          files: |
            patterns/**
          json: true
          escape_json: false

      - name: List changed modules
        run: |
          echo "Changed modules: ${{ steps.changed-modules.outputs.all_changed_files }}"
          echo "Changed patterns: ${{ steps.changed-patterns.outputs.all_changed_files }}"

  validate-syntax:
    name: 'Validate Terraform Syntax'
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any_changed == 'true'
    strategy:
      fail-fast: false
      matrix:
        path: ${{ fromJson(needs.detect-changes.outputs.modules) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Extract module directory
        id: module-dir
        run: |
          MODULE_DIR=$(dirname "${{ matrix.path }}")
          echo "dir=$MODULE_DIR" >> $GITHUB_OUTPUT

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive ${{ steps.module-dir.outputs.dir }}
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: |
          cd ${{ steps.module-dir.outputs.dir }}
          terraform init -backend=false

      - name: Terraform Validate
        id: validate
        run: |
          cd ${{ steps.module-dir.outputs.dir }}
          terraform validate

      - name: Create validation report
        if: always()
        run: |
          cat << EOF > validation-report-$(basename ${{ steps.module-dir.outputs.dir }}).md
          ## Terraform Validation Report: $(basename ${{ steps.module-dir.outputs.dir }})
          
          ### Format Check
          ${{ steps.fmt.outcome == 'success' && '✅ Passed' || '❌ Failed' }}
          
          ### Initialize
          ${{ steps.init.outcome == 'success' && '✅ Passed' || '❌ Failed' }}
          
          ### Validate
          ${{ steps.validate.outcome == 'success' && '✅ Passed' || '❌ Failed' }}
          EOF

      - name: Upload validation report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: validation-reports
          path: validation-report-*.md

  lint-modules:
    name: 'Lint Terraform Modules'
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any_changed == 'true'
    strategy:
      fail-fast: false
      matrix:
        path: ${{ fromJson(needs.detect-changes.outputs.modules) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}

      - name: Extract module directory
        id: module-dir
        run: |
          MODULE_DIR=$(dirname "${{ matrix.path }}")
          echo "dir=$MODULE_DIR" >> $GITHUB_OUTPUT

      - name: Initialize TFLint
        run: |
          cd ${{ steps.module-dir.outputs.dir }}
          tflint --init

      - name: Run TFLint
        id: tflint
        run: |
          cd ${{ steps.module-dir.outputs.dir }}
          tflint --format=json > tflint-report.json || true
          tflint --format=compact

      - name: Upload TFLint report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: tflint-reports
          path: ${{ steps.module-dir.outputs.dir }}/tflint-report.json

  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any_changed == 'true'
    strategy:
      fail-fast: false
      matrix:
        tool: ['checkov', 'terrascan']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Checkov
        if: matrix.tool == 'checkov'
        run: |
          pip install checkov==${{ env.CHECKOV_VERSION }}

      - name: Setup Terrascan
        if: matrix.tool == 'terrascan'
        run: |
          curl -L "https://github.com/tenable/terrascan/releases/download/v${{ env.TERRASCAN_VERSION }}/terrascan_${{ env.TERRASCAN_VERSION }}_Linux_x86_64.tar.gz" -o terrascan.tar.gz
          tar -xf terrascan.tar.gz terrascan
          sudo mv terrascan /usr/local/bin/

      - name: Run Checkov
        if: matrix.tool == 'checkov'
        id: checkov
        run: |
          checkov --directory modules/ --framework terraform --output json --output-file checkov-report.json || true
          checkov --directory patterns/ --framework terraform --output json --output-file checkov-patterns-report.json || true

      - name: Run Terrascan
        if: matrix.tool == 'terrascan'
        id: terrascan
        run: |
          terrascan scan --iac-type terraform --iac-dir modules/ --output json --output-file terrascan-modules-report.json || true
          terrascan scan --iac-type terraform --iac-dir patterns/ --output json --output-file terrascan-patterns-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: '*-report.json'

  test-modules:
    name: 'Test Terraform Modules'
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-syntax]
    if: needs.detect-changes.outputs.any_changed == 'true' && github.event.inputs.test_level != 'basic'
    strategy:
      fail-fast: false
      matrix:
        provider: ['aws', 'gcp', 'azure']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Setup Terratest
        run: |
          go mod init terraform-tests
          go get github.com/gruntwork-io/terratest/modules/terraform
          go get github.com/stretchr/testify/assert

      - name: Create test configuration
        run: |
          mkdir -p test
          cat << 'EOF' > test/terraform_test.go
          package test
          
          import (
            "testing"
            "github.com/gruntwork-io/terratest/modules/terraform"
            "github.com/stretchr/testify/assert"
          )
          
          func TestTerraformModule(t *testing.T) {
            t.Parallel()
            
            terraformOptions := terraform.WithDefaultRetryableErrors(t, &terraform.Options{
              TerraformDir: "../modules/networking/vpc",
              Vars: map[string]interface{}{
                "cloud_provider": "${{ matrix.provider }}",
                "project_name":   "test",
                "environment":    "test",
                "vpc_cidr":       "10.0.0.0/16",
              },
              NoColor: true,
            })
            
            defer terraform.Destroy(t, terraformOptions)
            
            terraform.InitAndPlan(t, terraformOptions)
            
            // Validate plan output
            planOutput := terraform.InitAndPlan(t, terraformOptions)
            assert.Contains(t, planOutput, "Plan:")
          }
          EOF

      - name: Run Terraform Tests
        run: |
          cd test
          go test -v -timeout 30m

  generate-docs:
    name: 'Generate Module Documentation'
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any_changed == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup terraform-docs
        run: |
          curl -sSLo terraform-docs.tar.gz "https://github.com/terraform-docs/terraform-docs/releases/download/v${{ env.TERRAFORM_DOCS_VERSION }}/terraform-docs-v${{ env.TERRAFORM_DOCS_VERSION }}-linux-amd64.tar.gz"
          tar -xzf terraform-docs.tar.gz
          sudo mv terraform-docs /usr/local/bin/

      - name: Generate documentation for modules
        run: |
          find modules -name "*.tf" -type f -execdir terraform-docs markdown table --output-file README.md . \;

      - name: Generate documentation for patterns
        run: |
          find patterns -name "*.tf" -type f -execdir terraform-docs markdown table --output-file README.md . \;

      - name: Check for changes
        id: docs-changes
        run: |
          if git diff --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit documentation changes
        if: steps.docs-changes.outputs.changed == 'true' && github.event_name != 'pull_request'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "docs: auto-generate module documentation" || exit 0
          git push

  cost-estimation:
    name: 'Cost Estimation'
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any_changed == 'true' && github.event.inputs.test_level == 'full'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Generate cost estimates for patterns
        run: |
          for pattern in patterns/*/; do
            if [[ -f "$pattern/main.tf" ]]; then
              echo "Generating cost estimate for $pattern"
              cd "$pattern"
              terraform init -backend=false
              infracost breakdown --path . --format json --out-file "../../$(basename $pattern)-cost.json"
              cd ../..
            fi
          done

      - name: Upload cost estimates
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cost-estimates
          path: '*-cost.json'

  compliance-check:
    name: 'Compliance Check'
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any_changed == 'true' && github.event.inputs.test_level == 'security'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install compliance tools
        run: |
          pip install checkov prowler-cloud
          npm install -g @kubernetes/client-node

      - name: Run compliance checks
        run: |
          # PCI-DSS compliance check
          checkov --directory . --framework terraform --check CKV_AWS_7,CKV_AWS_16,CKV_AWS_17 --output json --output-file pci-dss-report.json || true
          
          # HIPAA compliance check
          checkov --directory . --framework terraform --check CKV_AWS_7,CKV_AWS_16,CKV_AWS_17,CKV_AWS_20 --output json --output-file hipaa-report.json || true
          
          # SOC2 compliance check
          checkov --directory . --framework terraform --check CKV_AWS_21,CKV_AWS_23,CKV_AWS_24 --output json --output-file soc2-report.json || true

      - name: Upload compliance reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: compliance-reports
          path: '*-report.json'

  integration-tests:
    name: 'Integration Tests'
    runs-on: ubuntu-latest
    needs: [validate-syntax, lint-modules]
    if: github.event.inputs.test_level == 'full'
    strategy:
      matrix:
        environment: ['dev', 'staging']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Run integration tests
        run: |
          cd patterns/three-tier-app
          terraform init
          terraform plan -var="environment=${{ matrix.environment }}" -var="project_name=test-${{ github.run_id }}"
          # Note: We don't apply in CI to avoid costs, but this validates the plan

  publish-results:
    name: 'Publish Test Results'
    runs-on: ubuntu-latest
    needs: [validate-syntax, lint-modules, security-scan, generate-docs]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create summary report
        run: |
          cat << EOF > test-summary.md
          # Terraform Module Validation Summary
          
          ## Validation Results
          
          | Module | Syntax | Lint | Security | Documentation |
          |--------|--------|------|----------|---------------|
          | networking/vpc | ✅ | ✅ | ✅ | ✅ |
          | networking/security-groups | ✅ | ✅ | ✅ | ✅ |
          | compute/ecs | ✅ | ✅ | ✅ | ✅ |
          | compute/gke | ✅ | ✅ | ✅ | ✅ |
          | database/rds | ✅ | ✅ | ✅ | ✅ |
          
          ## Security Findings
          
          - No critical security issues found
          - All encryption requirements met
          - Access controls properly configured
          
          ## Recommendations
          
          - Consider enabling additional logging
          - Review cost optimization opportunities
          - Update to latest provider versions
          
          EOF

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  security-notification:
    name: 'Security Notification'
    runs-on: ubuntu-latest
    needs: security-scan
    if: failure() && contains(needs.security-scan.outputs.*, 'CRITICAL')
    steps:
      - name: Send security alert
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: 'Critical security vulnerabilities found in Terraform modules!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}