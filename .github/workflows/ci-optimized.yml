name: CI/CD Optimized Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM
  workflow_dispatch:
    inputs:
      skip_e2e:
        description: 'Skip E2E tests'
        required: false
        default: false
        type: boolean
      test_environment:
        description: 'Test environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      run_performance_tests:
        description: 'Run performance tests'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '20.x'
  SKIP_E2E: ${{ github.event.inputs.skip_e2e || false }}
  TEST_ENVIRONMENT: ${{ github.event.inputs.test_environment || 'staging' }}
  RUN_PERFORMANCE_TESTS: ${{ github.event.inputs.run_performance_tests || true }}
  FORCE_COLOR: 1
  CI: true

jobs:
  # Changed Files Detection for Intelligent Test Selection
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      tests: ${{ steps.changes.outputs.tests }}
      docs: ${{ steps.changes.outputs.docs }}
      config: ${{ steps.changes.outputs.config }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'src/components/**'
              - 'app/**'
              - 'public/**'
              - '*.tsx'
              - '*.ts'
              - 'tailwind.config.js'
              - 'next.config.js'
            backend:
              - 'src/lib/**'
              - 'src/services/**'
              - 'src/middleware/**'
              - 'app/api/**'
              - 'database/**'
              - 'migrations/**'
            tests:
              - '__tests__/**'
              - '*.test.ts'
              - '*.test.tsx'
              - 'jest.config.js'
              - 'playwright.config.ts'
            docs:
              - 'docs/**'
              - '*.md'
              - 'README.md'
            config:
              - 'package.json'
              - 'package-lock.json'
              - 'tsconfig.json'
              - '.github/workflows/**'

  # Code Quality & Security Checks
  quality-checks:
    name: Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Type checking
        run: npm run type-check

      - name: Linting
        run: npm run lint

      - name: Security audit
        run: npm audit --audit-level=moderate

      - name: License check
        run: npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD;ISC;CC0-1.0;Unlicense'

  # Parallel Unit Tests with Sharding
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [changes, quality-checks]
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true' || needs.changes.outputs.tests == 'true' || needs.changes.outputs.config == 'true'

    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x, 20.x]
        shard: [1, 2, 3, 4]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Cache Jest cache
        uses: actions/cache@v4
        with:
          path: .jest-cache
          key: jest-cache-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            jest-cache-${{ runner.os }}-${{ matrix.node-version }}-
            jest-cache-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run unit tests (Shard ${{ matrix.shard }})
        run: |
          npm run test:unit -- --shard=${{ matrix.shard }}/4 --cache --cacheDirectory=.jest-cache --maxWorkers=2 --verbose
        env:
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results-${{ matrix.node-version }}-${{ matrix.shard }}
          path: |
            coverage/
            test-results/
          retention-days: 30

  # Integration Tests with Database
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [changes, quality-checks]
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.tests == 'true' || needs.changes.outputs.config == 'true'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Cache Jest cache
        uses: actions/cache@v4
        with:
          path: .jest-cache
          key: jest-cache-integration-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            jest-cache-integration-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Setup test database
        run: |
          npm run db:migrate
          npm run db:seed
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379

      - name: Run integration tests (Shard ${{ matrix.shard }})
        run: |
          npm run test:integration -- --shard=${{ matrix.shard }}/2 --cache --cacheDirectory=.jest-cache --maxWorkers=1
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results-${{ matrix.shard }}
          path: test-results/
          retention-days: 30

  # E2E Tests with Browser Matrix
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [changes, unit-tests, integration-tests]
    if: ${{ !fromJSON(env.SKIP_E2E) && (needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true' || needs.changes.outputs.tests == 'true') }}

    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        shard: [1, 2]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: nextjs-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            nextjs-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Playwright Browsers
        run: npx playwright install ${{ matrix.browser }} --with-deps

      - name: Build application
        run: npm run build
        env:
          NODE_OPTIONS: --max-old-space-size=6144

      - name: Run E2E tests (${{ matrix.browser }} - Shard ${{ matrix.shard }})
        run: |
          npx playwright test --project=${{ matrix.browser }} --shard=${{ matrix.shard }}/2 --reporter=html
        env:
          PLAYWRIGHT_HTML_REPORT: playwright-report-${{ matrix.browser }}-${{ matrix.shard }}
          CI: true

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-${{ matrix.browser }}-${{ matrix.shard }}
          path: |
            test-results/
            playwright-report-${{ matrix.browser }}-${{ matrix.shard }}/
          retention-days: 30

  # Performance Tests with Multiple Strategies
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [changes, unit-tests]
    if: ${{ fromJSON(env.RUN_PERFORMANCE_TESTS) && (needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true') }}

    strategy:
      matrix:
        test-type: [lighthouse, load, benchmark]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: nextjs-perf-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            nextjs-perf-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build application
        run: npm run build
        env:
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Run performance tests (${{ matrix.test-type }})
        run: |
          case "${{ matrix.test-type }}" in
            lighthouse)
              npm run lighthouse:ci
              ;;
            load)
              npm run test:performance
              ;;
            benchmark)
              npm run test:performance -- --testNamePattern="benchmark"
              ;;
          esac
        env:
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results-${{ matrix.test-type }}
          path: |
            test-results/
            lighthouse-ci-report.json
            lighthouse-report.*
          retention-days: 30

      - name: Comment performance results on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && matrix.test-type == 'lighthouse'
        with:
          script: |
            const fs = require('fs');
            try {
              const report = JSON.parse(fs.readFileSync('lighthouse-ci-report.json', 'utf8'));
              const performance = report.lhr.categories.performance.score * 100;
              const accessibility = report.lhr.categories.accessibility.score * 100;
              const bestPractices = report.lhr.categories['best-practices'].score * 100;
              const seo = report.lhr.categories.seo.score * 100;
              
              const comment = `## 🚀 Performance Report\n\n` +
                `| Metric | Score |\n` +
                `|--------|-------|\n` +
                `| Performance | ${performance.toFixed(1)}% |\n` +
                `| Accessibility | ${accessibility.toFixed(1)}% |\n` +
                `| Best Practices | ${bestPractices.toFixed(1)}% |\n` +
                `| SEO | ${seo.toFixed(1)}% |\n\n` +
                `*Generated by Lighthouse CI*`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not read lighthouse report:', error);
            }

  # Accessibility Tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [changes, unit-tests]
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.tests == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run accessibility tests
        run: npm run test:accessibility

      - name: Upload accessibility test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-test-results
          path: test-results/
          retention-days: 30

  # Comprehensive Test Coverage
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [changes, unit-tests, integration-tests]
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true' || needs.changes.outputs.tests == 'true'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Cache Jest cache
        uses: actions/cache@v4
        with:
          path: .jest-cache
          key: jest-cache-coverage-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            jest-cache-coverage-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Setup test database
        run: |
          npm run db:migrate
          npm run db:seed
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379

      - name: Run tests with coverage
        run: npm run test:coverage -- --cache --cacheDirectory=.jest-cache --maxWorkers=2
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

      - name: Coverage Quality Gate
        run: |
          coverage=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          if (( $(echo "$coverage < 80" | bc -l) )); then
            echo "Coverage $coverage% is below 80% threshold"
            exit 1
          fi
          echo "Coverage $coverage% meets quality gate"

      - name: Comment PR with coverage
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: coverage/coverage-summary.json

      - name: Upload coverage results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-results
          path: coverage/
          retention-days: 30

  # Test Results Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, accessibility-tests, coverage]
    if: always()

    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4

      - name: Generate test summary
        run: |
          echo "# 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Test Status" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} | $([ '${{ needs.unit-tests.result }}' == 'success' ] && echo '✅' || echo '❌') |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} | $([ '${{ needs.integration-tests.result }}' == 'success' ] && echo '✅' || echo '❌') |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result }} | $([ '${{ needs.e2e-tests.result }}' == 'success' ] && echo '✅' || echo '❌') |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-tests.result }} | $([ '${{ needs.performance-tests.result }}' == 'success' ] && echo '✅' || echo '❌') |" >> $GITHUB_STEP_SUMMARY
          echo "| Accessibility Tests | ${{ needs.accessibility-tests.result }} | $([ '${{ needs.accessibility-tests.result }}' == 'success' ] && echo '✅' || echo '❌') |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage | ${{ needs.coverage.result }} | $([ '${{ needs.coverage.result }}' == 'success' ] && echo '✅' || echo '❌') |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f coverage/coverage-summary.json ]; then
            echo "## 📈 Coverage Summary" >> $GITHUB_STEP_SUMMARY
            cat coverage/coverage-summary.json >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "## 🔗 Artifact Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Unit Test Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Integration Test Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [E2E Test Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Performance Test Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Coverage Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Quality Gates" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code Quality: Linting and Type Checking" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security: Dependency Audit" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Performance: Lighthouse CI" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Accessibility: WCAG Compliance" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Coverage: 80% Minimum Threshold" >> $GITHUB_STEP_SUMMARY