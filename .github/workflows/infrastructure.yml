name: Infrastructure as Code

on:
  push:
    branches: [ main ]
    paths:
      - 'infrastructure/**'
      - 'terraform/**'
      - 'k8s/**'
      - '.github/workflows/infrastructure.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'infrastructure/**'
      - 'terraform/**'
      - 'k8s/**'
      - '.github/workflows/infrastructure.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Infrastructure action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force:
        description: 'Force action'
        required: false
        default: false
        type: boolean

env:
  TERRAFORM_VERSION: '1.6.0'
  KUBECTL_VERSION: '1.28.0'
  HELM_VERSION: '3.13.0'
  TARGET_ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
  INFRASTRUCTURE_ACTION: ${{ github.event.inputs.action || 'plan' }}
  FORCE_ACTION: ${{ github.event.inputs.force || false }}

jobs:
  # Terraform validation and security scanning
  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        run: |
          cd infrastructure
          terraform fmt -check -recursive

      - name: Terraform Init
        run: |
          cd infrastructure
          terraform init -backend=false

      - name: Terraform Validate
        run: |
          cd infrastructure
          terraform validate

      - name: Run tflint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.48.0

      - name: Init TFLint
        run: tflint --init

      - name: Run TFLint
        run: |
          cd infrastructure
          tflint --recursive

      - name: Run Checkov security scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ./infrastructure
          soft_fail: true
          framework: terraform
          output_format: sarif
          output_file_path: checkov-terraform.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-terraform.sarif

  # Terraform planning for staging
  terraform-plan-staging:
    name: Terraform Plan (Staging)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: terraform-validate
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: us-east-1

      - name: Terraform Init
        run: |
          cd infrastructure
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET_STAGING }}" \
            -backend-config="key=staging/terraform.tfstate" \
            -backend-config="region=us-east-1"

      - name: Terraform Plan
        id: plan
        run: |
          cd infrastructure
          terraform plan \
            -var-file="environments/staging.tfvars" \
            -out=staging.tfplan \
            -detailed-exitcode
        continue-on-error: true

      - name: Comment Plan on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `
            ## üèóÔ∏è Terraform Plan (Staging)
            
            **Plan Status:** ${{ steps.plan.outcome }}
            **Exit Code:** ${{ steps.plan.outputs.exitcode }}
            
            <details>
            <summary>Show Plan Output</summary>
            
            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-staging
          path: infrastructure/staging.tfplan
          retention-days: 30

  # Terraform planning for production
  terraform-plan-production:
    name: Terraform Plan (Production)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: terraform-validate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PRODUCTION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PRODUCTION }}
          aws-region: us-east-1

      - name: Terraform Init
        run: |
          cd infrastructure
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET_PRODUCTION }}" \
            -backend-config="key=production/terraform.tfstate" \
            -backend-config="region=us-east-1"

      - name: Terraform Plan
        id: plan
        run: |
          cd infrastructure
          terraform plan \
            -var-file="environments/production.tfvars" \
            -out=production.tfplan \
            -detailed-exitcode

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-production
          path: infrastructure/production.tfplan
          retention-days: 30

  # Terraform apply for staging
  terraform-apply-staging:
    name: Terraform Apply (Staging)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [terraform-validate, terraform-plan-staging]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: us-east-1

      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-staging
          path: infrastructure/

      - name: Terraform Init
        run: |
          cd infrastructure
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET_STAGING }}" \
            -backend-config="key=staging/terraform.tfstate" \
            -backend-config="region=us-east-1"

      - name: Terraform Apply
        run: |
          cd infrastructure
          terraform apply staging.tfplan

      - name: Output infrastructure info
        id: output
        run: |
          cd infrastructure
          terraform output -json > staging-outputs.json
          cat staging-outputs.json

      - name: Upload infrastructure outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-staging
          path: infrastructure/staging-outputs.json
          retention-days: 30

  # Terraform apply for production (requires manual approval)
  terraform-apply-production:
    name: Terraform Apply (Production)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [terraform-validate, terraform-plan-production]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply' && github.event.inputs.environment == 'production'
    environment: production
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PRODUCTION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PRODUCTION }}
          aws-region: us-east-1

      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-production
          path: infrastructure/

      - name: Terraform Init
        run: |
          cd infrastructure
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET_PRODUCTION }}" \
            -backend-config="key=production/terraform.tfstate" \
            -backend-config="region=us-east-1"

      - name: Terraform Apply
        run: |
          cd infrastructure
          terraform apply production.tfplan

      - name: Output infrastructure info
        id: output
        run: |
          cd infrastructure
          terraform output -json > production-outputs.json
          cat production-outputs.json

      - name: Upload infrastructure outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-production
          path: infrastructure/production-outputs.json
          retention-days: 30

  # Kubernetes deployment and validation
  kubernetes-deploy:
    name: Kubernetes Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [terraform-apply-staging, terraform-apply-production]
    if: always() && (needs.terraform-apply-staging.result == 'success' || needs.terraform-apply-production.result == 'success')
    
    strategy:
      matrix:
        environment: [staging, production]
        include:
          - environment: staging
            cluster_name: learning-assistant-staging
          - environment: production
            cluster_name: learning-assistant-production
    
    environment: ${{ matrix.environment }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ matrix.environment == 'staging' && secrets.AWS_ACCESS_KEY_ID_STAGING || secrets.AWS_ACCESS_KEY_ID_PRODUCTION }}
          aws-secret-access-key: ${{ matrix.environment == 'staging' && secrets.AWS_SECRET_ACCESS_KEY_STAGING || secrets.AWS_SECRET_ACCESS_KEY_PRODUCTION }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name ${{ matrix.cluster_name }}

      - name: Validate cluster access
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Deploy/Update Kubernetes manifests
        run: |
          cd k8s
          kubectl apply -f namespace.yaml
          kubectl apply -f configmap.yaml
          kubectl apply -f secret.yaml
          kubectl apply -f persistent-volumes.yaml
          kubectl apply -f services.yaml
          kubectl apply -f deployment.yaml
          kubectl apply -f ingress.yaml
          kubectl apply -f hpa.yaml

      - name: Wait for deployment to be ready
        run: |
          kubectl rollout status deployment/learning-assistant -n learning-assistant --timeout=600s

      - name: Run deployment validation
        run: |
          echo "Validating Kubernetes deployment..."
          kubectl get all -n learning-assistant
          kubectl describe deployment learning-assistant -n learning-assistant
          
          # Check if pods are running
          RUNNING_PODS=$(kubectl get pods -n learning-assistant -o jsonpath='{.items[?(@.status.phase=="Running")].metadata.name}' | wc -w)
          if [[ $RUNNING_PODS -eq 0 ]]; then
            echo "No pods are running"
            exit 1
          fi
          echo "‚úÖ $RUNNING_PODS pods are running"

      - name: Deploy monitoring stack
        if: matrix.environment == 'production'
        run: |
          cd monitoring
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update
          
          # Deploy Prometheus
          helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --create-namespace \
            --values monitoring/prometheus-values.yaml
          
          # Deploy Grafana
          helm upgrade --install grafana grafana/grafana \
            --namespace monitoring \
            --create-namespace \
            --values monitoring/grafana-values.yaml

  # Infrastructure testing and validation
  infrastructure-test:
    name: Infrastructure Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: kubernetes-deploy
    if: always() && needs.kubernetes-deploy.result == 'success'
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go for testing
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install testing tools
        run: |
          go install github.com/gruntwork-io/terratest/modules/terraform@latest
          go install github.com/gruntwork-io/terratest/modules/k8s@latest

      - name: Run infrastructure tests
        run: |
          cd infrastructure/tests
          go test -v -timeout 30m

      - name: Run security compliance tests
        run: |
          echo "Running security compliance tests..."
          # Test security groups, IAM policies, etc.
          # Use tools like Prowler, Scout Suite, or custom scripts

      - name: Run performance baseline tests
        run: |
          echo "Running performance baseline tests..."
          # Test load balancer configuration, autoscaling, etc.

  # Cost optimization analysis
  cost-analysis:
    name: Cost Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [terraform-apply-staging, terraform-apply-production]
    if: always() && (needs.terraform-apply-staging.result == 'success' || needs.terraform-apply-production.result == 'success')
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Install Infracost
        run: |
          curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh

      - name: Run Infracost analysis
        run: |
          cd infrastructure
          infracost breakdown --path . --format json --out-file infracost-report.json
          infracost output --path infracost-report.json --format table

      - name: Upload cost analysis
        uses: actions/upload-artifact@v4
        with:
          name: cost-analysis-report
          path: infrastructure/infracost-report.json
          retention-days: 30

      - name: Comment cost analysis on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            try {
              const costReport = JSON.parse(fs.readFileSync('infrastructure/infracost-report.json', 'utf8'));
              const monthlyCost = costReport.totalMonthlyCost;
              
              const comment = `
              ## üí∞ Infrastructure Cost Analysis
              
              **Estimated Monthly Cost:** $${monthlyCost}
              
              This analysis shows the estimated monthly cost for the infrastructure changes.
              
              *Generated by Infracost*
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not read cost report:', error);
            }

  # Infrastructure summary
  infrastructure-summary:
    name: Infrastructure Summary
    runs-on: ubuntu-latest
    needs: [terraform-validate, terraform-plan-staging, terraform-plan-production, terraform-apply-staging, terraform-apply-production, kubernetes-deploy, infrastructure-test, cost-analysis]
    if: always()
    
    steps:
      - name: Generate infrastructure summary
        run: |
          echo "# üèóÔ∏è Infrastructure Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìã Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform Validation | ${{ needs.terraform-validate.result }} | $([ '${{ needs.terraform-validate.result }}' == 'success' ] && echo '‚úÖ' || echo '‚ùå') |" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform Plan (Staging) | ${{ needs.terraform-plan-staging.result }} | $([ '${{ needs.terraform-plan-staging.result }}' == 'success' ] && echo '‚úÖ' || echo '‚ùå') |" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform Plan (Production) | ${{ needs.terraform-plan-production.result }} | $([ '${{ needs.terraform-plan-production.result }}' == 'success' ] && echo '‚úÖ' || echo '‚ùå') |" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform Apply (Staging) | ${{ needs.terraform-apply-staging.result }} | $([ '${{ needs.terraform-apply-staging.result }}' == 'success' ] && echo '‚úÖ' || echo '‚ùå') |" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform Apply (Production) | ${{ needs.terraform-apply-production.result }} | $([ '${{ needs.terraform-apply-production.result }}' == 'success' ] && echo '‚úÖ' || echo '‚ùå') |" >> $GITHUB_STEP_SUMMARY
          echo "| Kubernetes Deploy | ${{ needs.kubernetes-deploy.result }} | $([ '${{ needs.kubernetes-deploy.result }}' == 'success' ] && echo '‚úÖ' || echo '‚ùå') |" >> $GITHUB_STEP_SUMMARY
          echo "| Infrastructure Test | ${{ needs.infrastructure-test.result }} | $([ '${{ needs.infrastructure-test.result }}' == 'success' ] && echo '‚úÖ' || echo '‚ùå') |" >> $GITHUB_STEP_SUMMARY
          echo "| Cost Analysis | ${{ needs.cost-analysis.result }} | $([ '${{ needs.cost-analysis.result }}' == 'success' ] && echo '‚úÖ' || echo '‚ùå') |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## üîß Infrastructure Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Terraform Version:** ${{ env.TERRAFORM_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Kubectl Version:** ${{ env.KUBECTL_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Helm Version:** ${{ env.HELM_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Environment:** ${{ env.TARGET_ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Action:** ${{ env.INFRASTRUCTURE_ACTION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## üîó Resources" >> $GITHUB_STEP_SUMMARY
          echo "- [Terraform State](https://s3.console.aws.amazon.com/s3/buckets/terraform-state-bucket)" >> $GITHUB_STEP_SUMMARY
          echo "- [AWS Console](https://console.aws.amazon.com/)" >> $GITHUB_STEP_SUMMARY
          echo "- [Kubernetes Dashboard](https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/)" >> $GITHUB_STEP_SUMMARY
          echo "- [Cost Analysis Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY