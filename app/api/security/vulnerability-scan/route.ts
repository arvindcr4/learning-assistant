import { NextRequest, NextResponse } from 'next/server';
import { withSecureAuth } from '@/middleware/secure-auth';
import { vulnerabilityScanner } from '@/lib/security/vulnerability-scanner';
import { z } from 'zod';

const scanRequestSchema = z.object({
  scope: z.array(z.string().url()).min(1).max(10),
  scanType: z.enum(['quick', 'full', 'deep']).optional().default('full'),
  includeCategories: z.array(z.string()).optional(),
  excludeCategories: z.array(z.string()).optional(),
});

const updateFindingSchema = z.object({
  findingId: z.string(),
  status: z.enum(['open', 'investigating', 'accepted', 'fixed', 'mitigated', 'wont_fix']),
  notes: z.string().max(1000).optional(),
});

const markFalsePositiveSchema = z.object({
  findingId: z.string(),
  reason: z.string().min(1).max(500),
});

async function handlePost(request: NextRequest) {
  try {
    const body = await request.json();
    const { scope, scanType, includeCategories, excludeCategories } = scanRequestSchema.parse(body);
    
    const userId = request.user!.id;
    
    // Only security team and admins can initiate vulnerability scans
    if (!['admin', 'security_team', 'security_analyst'].includes(request.user!.role)) {
      return NextResponse.json(
        { 
          error: 'Insufficient permissions to initiate vulnerability scans',
          code: 'INSUFFICIENT_PERMISSIONS'
        },
        { status: 403 }
      );
    }
    
    console.log(`Starting vulnerability scan initiated by ${userId}`);
    
    // Start the vulnerability scan (async)
    const scanId = await vulnerabilityScanner.performAutomatedScan(scope, {
      scanType,
      includeCategories: includeCategories as any,
      excludeCategories: excludeCategories as any,
      executedBy: userId,
    });
    
    return NextResponse.json({
      success: true,
      message: 'Vulnerability scan initiated successfully',
      data: {
        scanId,
        status: 'running',
        estimatedCompletion: '15-30 minutes',
      },
    });
  } catch (error) {
    console.error('Vulnerability scan initiation error:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { 
          error: 'Invalid scan parameters',
          details: error.errors,
          code: 'VALIDATION_ERROR'
        },
        { status: 400 }
      );
    }
    
    return NextResponse.json(
      { 
        error: 'Failed to initiate vulnerability scan',
        code: 'SCAN_INITIATION_ERROR'
      },
      { status: 500 }
    );
  }
}

async function handleGet(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    
    // Only security team and admins can view vulnerability reports
    if (!['admin', 'security_team', 'security_analyst'].includes(request.user!.role)) {
      return NextResponse.json(
        { 
          error: 'Insufficient permissions to view vulnerability reports',
          code: 'INSUFFICIENT_PERMISSIONS'
        },
        { status: 403 }
      );
    }
    
    const reportId = searchParams.get('reportId');
    
    if (reportId) {
      // Get specific report
      const report = vulnerabilityScanner.getReport(reportId);
      
      if (!report) {
        return NextResponse.json(
          { 
            error: 'Vulnerability report not found',
            code: 'REPORT_NOT_FOUND'
          },
          { status: 404 }
        );
      }
      
      return NextResponse.json({
        success: true,
        data: report,
      });
    } else {
      // Get all reports with filtering
      const filters: any = {};
      
      if (searchParams.get('scanType')) {
        filters.scanType = searchParams.get('scanType');
      }
      if (searchParams.get('executedBy')) {
        filters.executedBy = searchParams.get('executedBy');
      }
      
      const startDate = searchParams.get('startDate');
      const endDate = searchParams.get('endDate');
      if (startDate && endDate) {
        filters.dateRange = {
          start: new Date(startDate),
          end: new Date(endDate),
        };
      }
      
      const reports = vulnerabilityScanner.getReports(filters);
      const metrics = vulnerabilityScanner.getSecurityMetrics();
      
      return NextResponse.json({
        success: true,
        data: {
          reports: reports.map(report => ({
            id: report.id,
            timestamp: report.timestamp,
            scanType: report.scanType,
            scope: report.scope,
            duration: report.duration,
            summary: report.summary,
            executedBy: report.executedBy,
            tools: report.tools,
          })),
          metrics: {
            totalFindings: metrics.totalFindings,
            findingsBySeverity: metrics.findingsBySeverity,
            findingsByCategory: metrics.findingsByCategory,
            findingsByStatus: metrics.findingsByStatus,
            riskScore: metrics.riskScore,
            topVulnerabilities: metrics.topVulnerabilities.slice(0, 5),
          },
          pagination: {
            total: reports.length,
          },
        },
      });
    }
  } catch (error) {
    console.error('Vulnerability report retrieval error:', error);
    
    return NextResponse.json(
      { 
        error: 'Failed to retrieve vulnerability reports',
        code: 'REPORT_RETRIEVAL_ERROR'
      },
      { status: 500 }
    );
  }
}

async function handlePatch(request: NextRequest) {
  try {
    const body = await request.json();
    const action = body.action;
    
    // Only security team and admins can update findings
    if (!['admin', 'security_team', 'security_analyst'].includes(request.user!.role)) {
      return NextResponse.json(
        { 
          error: 'Insufficient permissions to update findings',
          code: 'INSUFFICIENT_PERMISSIONS'
        },
        { status: 403 }
      );
    }
    
    if (action === 'update_status') {
      const { findingId, status, notes } = updateFindingSchema.parse(body);
      
      const success = vulnerabilityScanner.updateFindingStatus(findingId, status, notes);
      
      if (!success) {
        return NextResponse.json(
          { 
            error: 'Finding not found',
            code: 'FINDING_NOT_FOUND'
          },
          { status: 404 }
        );
      }
      
      return NextResponse.json({
        success: true,
        message: 'Finding status updated successfully',
      });
    } else if (action === 'mark_false_positive') {
      const { findingId, reason } = markFalsePositiveSchema.parse(body);
      
      const success = vulnerabilityScanner.markFalsePositive(findingId, reason);
      
      if (!success) {
        return NextResponse.json(
          { 
            error: 'Finding not found',
            code: 'FINDING_NOT_FOUND'
          },
          { status: 404 }
        );
      }
      
      return NextResponse.json({
        success: true,
        message: 'Finding marked as false positive',
      });
    } else {
      return NextResponse.json(
        { 
          error: 'Invalid action',
          code: 'INVALID_ACTION'
        },
        { status: 400 }
      );
    }
  } catch (error) {
    console.error('Finding update error:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { 
          error: 'Invalid update data',
          details: error.errors,
          code: 'VALIDATION_ERROR'
        },
        { status: 400 }
      );
    }
    
    return NextResponse.json(
      { 
        error: 'Failed to update finding',
        code: 'FINDING_UPDATE_ERROR'
      },
      { status: 500 }
    );
  }
}

export const POST = withSecureAuth(handlePost, {
  requiredRoles: ['admin', 'security_team', 'security_analyst'],
  rateLimits: {
    maxRequestsPerUser: 5, // Limited scans per user
    maxRequestsPerIP: 3,
    windowMs: 60 * 60 * 1000, // 1 hour
  },
});

export const GET = withSecureAuth(handleGet, {
  requiredRoles: ['admin', 'security_team', 'security_analyst'],
  rateLimits: {
    maxRequestsPerUser: 60,
    maxRequestsPerIP: 30,
    windowMs: 60000, // 1 minute
  },
});

export const PATCH = withSecureAuth(handlePatch, {
  requiredRoles: ['admin', 'security_team', 'security_analyst'],
  rateLimits: {
    maxRequestsPerUser: 30,
    maxRequestsPerIP: 15,
    windowMs: 60000, // 1 minute
  },
});