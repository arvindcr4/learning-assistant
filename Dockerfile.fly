# Dockerfile optimized for Fly.io deployment
# Multi-stage build for Next.js Learning Assistant application
# Includes PostgreSQL client, health checks, and security optimizations

# =============================================================================
# Stage 1: Base image with common dependencies
# =============================================================================
FROM node:20-alpine AS base

# Install system dependencies and PostgreSQL client
RUN apk add --no-cache \
    libc6-compat \
    postgresql-client \
    curl \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Create non-root user for security
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# =============================================================================
# Stage 2: Dependencies installation
# =============================================================================
FROM base AS deps

# Copy package files
COPY package*.json ./

# Install dependencies with cache optimization
RUN --mount=type=cache,target=/root/.npm \
    npm ci --omit=dev --ignore-scripts && \
    npm cache clean --force

# =============================================================================
# Stage 3: Build stage
# =============================================================================
FROM base AS builder

# Copy package files
COPY package*.json ./

# Install all dependencies (including dev dependencies)
RUN --mount=type=cache,target=/root/.npm \
    npm ci --ignore-scripts

# Copy source code
COPY . .

# Set build environment variables
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

# Build the application with standalone output
RUN npm run build

# =============================================================================
# Stage 4: Production runtime
# =============================================================================
FROM base AS runner

# Set production environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000

# Create necessary directories with proper permissions
RUN mkdir -p /app/data /app/logs /app/tmp && \
    chown -R nextjs:nodejs /app/data /app/logs /app/tmp

# Copy production dependencies
COPY --from=deps --chown=nextjs:nodejs /app/node_modules ./node_modules

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Copy additional files needed for runtime
COPY --from=builder --chown=nextjs:nodejs /app/package.json ./package.json
COPY --from=builder --chown=nextjs:nodejs /app/scripts ./scripts

# Set proper permissions for data directory
RUN chown -R nextjs:nodejs /app && \
    chmod -R 755 /app/data /app/logs /app/tmp

# Create health check script
RUN echo '#!/bin/sh\n\
curl -f -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/health || exit 1' > /app/healthcheck.sh && \
    chmod +x /app/healthcheck.sh && \
    chown nextjs:nodejs /app/healthcheck.sh

# Expose port
EXPOSE 3000

# Switch to non-root user
USER nextjs

# Health check with proper timeout and retries
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD ["/app/healthcheck.sh"]

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "server.js"]