# Default values for microservice.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global configuration
global:
  # Image registry
  imageRegistry: ""
  # Image pull secrets
  imagePullSecrets: []
  # Storage class
  storageClass: ""
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000

# Replica count
replicaCount: 3

# Image configuration
image:
  registry: docker.io
  repository: nginx
  tag: "1.25.3-alpine"
  pullPolicy: IfNotPresent
  # Optionally specify an array of imagePullSecrets
  pullSecrets: []

# Service account configuration
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use
  name: ""
  # Automount API credentials for a service account
  automountServiceAccountToken: false

# Pod annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8080"
  prometheus.io/path: "/metrics"

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

# Container security context
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
    - ALL

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 8080
  # Additional ports
  extraPorts: []
  # Service annotations
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
  # Load balancer source ranges
  loadBalancerSourceRanges: []

# Ingress configuration
ingress:
  enabled: false
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: chart-example-tls
      hosts:
        - chart-example.local

# Resource limits and requests
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

# Autoscaling configuration
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  # Scaling policies
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 50%
  # maxUnavailable: 1

# Node selection
nodeSelector: {}

# Tolerations
tolerations: []

# Pod affinity and anti-affinity
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - microservice
        topologyKey: kubernetes.io/hostname

# Environment variables
env:
  - name: ENVIRONMENT
    value: "development"
  - name: LOG_LEVEL
    value: "info"
  - name: PORT
    value: "8080"

# Environment variables from secrets/configmaps
envFrom: []

# Container ports
containerPorts:
  - name: http
    containerPort: 8080
    protocol: TCP
  - name: metrics
    containerPort: 8080
    protocol: TCP

# Liveness probe
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

# Readiness probe
readinessProbe:
  httpGet:
    path: /ready
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3
  successThreshold: 1

# Startup probe
startupProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30
  successThreshold: 1

# Volume mounts
volumeMounts:
  - name: tmp
    mountPath: /tmp
  - name: cache
    mountPath: /app/cache

# Volumes
volumes:
  - name: tmp
    emptyDir:
      medium: Memory
  - name: cache
    emptyDir: {}

# Persistent Volume Claims
persistence:
  enabled: false
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 1Gi
  annotations: {}

# ConfigMap
configMap:
  enabled: true
  data:
    app.properties: |
      server.port=8080
      logging.level.root=INFO
      management.endpoints.web.exposure.include=health,info,metrics

# Secret
secret:
  enabled: false
  data: {}

# Service Monitor for Prometheus
serviceMonitor:
  enabled: false
  namespace: ""
  interval: 30s
  scrapeTimeout: 10s
  path: /metrics
  labels: {}
  annotations: {}

# Network Policy
networkPolicy:
  enabled: false
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
      ports:
      - protocol: TCP
        port: 8080
    - from:
      - namespaceSelector:
          matchLabels:
            name: monitoring
      ports:
      - protocol: TCP
        port: 8080
  egress:
    - to: []
      ports:
      - protocol: TCP
        port: 53
      - protocol: UDP
        port: 53
    - to: []
      ports:
      - protocol: TCP
        port: 80
      - protocol: TCP
        port: 443

# Tests
tests:
  enabled: true
  image:
    registry: docker.io
    repository: busybox
    tag: latest

# Extra objects to deploy
extraObjects: []

# Pod annotations
podLabels: {}

# Deployment strategy
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 25%
    maxSurge: 25%

# Init containers
initContainers: []

# Sidecar containers
sidecars: []

# Lifecycle hooks
lifecycle: {}

# Pod priority class
priorityClassName: ""

# DNS config
dnsConfig: {}

# DNS policy
dnsPolicy: ClusterFirst

# Termination grace period
terminationGracePeriodSeconds: 30

# Image pull policy
imagePullPolicy: IfNotPresent

# Security annotations
securityAnnotations:
  container.apparmor.security.beta.kubernetes.io/microservice: runtime/default