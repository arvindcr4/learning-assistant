apiVersion: v1
kind: ConfigMap
metadata:
  name: learning-assistant-config
  namespace: learning-assistant
  labels:
    app: learning-assistant
    component: config
data:
  NODE_ENV: "production"
  PORT: "3000"
  NEXT_TELEMETRY_DISABLED: "1"
  LOG_LEVEL: "info"
  CACHE_TTL: "3600"
  SESSION_TIMEOUT: "7200"
  MAX_UPLOAD_SIZE: "10485760"
  RATE_LIMIT_WINDOW: "900000"
  RATE_LIMIT_MAX: "100"
  CORS_ORIGIN: "https://learning-assistant.example.com"
  FEATURES_ENABLED: "analytics,recommendations,chat,assessment"
  PAGINATION_DEFAULT_SIZE: "20"
  PAGINATION_MAX_SIZE: "100"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: learning-assistant-nginx-config
  namespace: learning-assistant
  labels:
    app: learning-assistant
    component: nginx
data:
  nginx.conf: |
    upstream learning_assistant {
        server learning-assistant-service:3000;
        keepalive 32;
    }
    
    server {
        listen 80;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'" always;
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Static assets
        location /static/ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            try_files $uri =404;
        }
        
        # API routes
        location /api/ {
            proxy_pass http://learning_assistant;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # Main application
        location / {
            proxy_pass http://learning_assistant;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # Gzip compression
        gzip on;
        gzip_comp_level 6;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: learning-assistant-monitoring-config
  namespace: learning-assistant
  labels:
    app: learning-assistant
    component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    scrape_configs:
      - job_name: 'learning-assistant'
        static_configs:
          - targets: ['learning-assistant-service:3000']
        metrics_path: '/api/metrics'
        scrape_interval: 30s
        scrape_timeout: 10s
        
      - job_name: 'postgres'
        static_configs:
          - targets: ['postgres-service:5432']
        metrics_path: '/metrics'
        scrape_interval: 30s
        
      - job_name: 'redis'
        static_configs:
          - targets: ['redis-service:6379']
        metrics_path: '/metrics'
        scrape_interval: 30s
  
  alerting_rules.yml: |
    groups:
    - name: learning-assistant.rules
      rules:
      - alert: HighErrorRate
        expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.1
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "High error rate detected"
          description: "Error rate is {{ $value }} for the last 5 minutes"
      
      - alert: HighLatency
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 1
        for: 10m
        labels:
          severity: warning
        annotations:
          summary: "High latency detected"
          description: "95th percentile latency is {{ $value }}s"
      
      - alert: DatabaseConnectionFailure
        expr: up{job="postgres"} == 0
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: "Database connection failure"
          description: "Cannot connect to PostgreSQL database"
      
      - alert: RedisConnectionFailure
        expr: up{job="redis"} == 0
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "Redis connection failure"
          description: "Cannot connect to Redis cache"