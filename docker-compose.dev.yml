version: '3.8'

services:
  # Development Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    ports:
      - "3000:3000"
      - "9229:9229" # Node.js debugging port
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://learning_user:${POSTGRES_PASSWORD:-dev_password}@postgres:5432/learning_assistant_dev
      - REDIS_URL=redis://redis:6379
      - NEXT_TELEMETRY_DISABLED=1
      - LOG_LEVEL=debug
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - learning-assistant-dev-network

  # PostgreSQL Database for Development
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=learning_assistant_dev
      - POSTGRES_USER=learning_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-dev_password}
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./DATABASE_SCHEMA.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./scripts/db-init.sql:/docker-entrypoint-initdb.d/02-init.sql:ro
      - ./scripts/dev-seed.sql:/docker-entrypoint-initdb.d/03-seed.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U learning_user -d learning_assistant_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - learning-assistant-dev-network

  # Redis Cache for Development
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_dev_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - learning-assistant-dev-network

  # Maildev for Email Testing
  maildev:
    image: maildev/maildev
    ports:
      - "1080:1080"
      - "1025:1025"
    restart: unless-stopped
    networks:
      - learning-assistant-dev-network

  # Adminer for Database Management
  adminer:
    image: adminer
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - learning-assistant-dev-network

volumes:
  postgres_dev_data:
  redis_dev_data:

networks:
  learning-assistant-dev-network:
    driver: bridge